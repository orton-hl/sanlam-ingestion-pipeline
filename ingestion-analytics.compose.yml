version: '3.8'

services:

  sanlamIngestionAgent:
    image: ghcr.io/orton-hl/sanlam-ingestion-agent:v1.0.0
    container_name: sanlamIngestionAgent
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager

      - KAFKA_INGEST_BOOTSTRAP_SERVERS=kafka-ingest:29092
      - KAFKA_INGEST_TOPIC=tpc-ingest

      - KAFKA_DLQ_BOOTSTRAP_SERVERS=kafka-ingest-dlq:29093
      - KAFKA_DLQ_TOPIC=tpc-ingest-dlq
      
      - KAFKA_LOGS_BOOTSTRAP_SERVERS=kafka-logs:29094
      - KAFKA_LOGS_TOPIC=tpc-ingest-logs

      - POSTGRES_JDBC_URL=${POSTGRES_JDBC_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      - KIBANA=${KIBANA}
      - ELASTIC_SEARCH=${ELASTIC_SEARCH_URL}

      - ENV=${ENV}
      - AGENT_ID=${AGENT_ID}
      - DEBUG_MODE=${DEBUG_MODE}
      - LOG_LEVEL=${LOG_LEVEL}
      - INGEST_CONFIG_SOURCE=${INGEST_CONFIG_SOURCE}
      - INGEST_CONFIG_VERSION=${INGEST_CONFIG_VERSION}
      - INGEST_CONFIG_X_BEARER_TOKEN=${INGEST_CONFIG_X_BEARER_TOKEN}
    ports:
      - "8085:8085"
    networks:
      - kafka-net

  # TimescaleDB (no persistence)
  timescaledb:
    image: timescale/timescaledb:2.13.0-pg14
    container_name: timescaledb
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    networks:
      - db-net
    volumes:
      - ./timescale/init/:/docker-entrypoint-initdb.d

  # Flink Services
  jobmanager:
    image: flink:1.20.1
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - KAFKA_INGEST_BOOTSTRAP_SERVERS=${KAFKA_INGEST_BOOTSTRAP_SERVERS}
      - KAFKA_INGEST_TOPIC=tpc-ingest
      - KAFKA_DLQ_BOOTSTRAP_SERVERS=${KAFKA_DLQ_BOOTSTRAP_SERVERS}
      - KAFKA_DLQ_TOPIC=tpc-ingest-dlq
      - KAFKA_LOGS_BOOTSTRAP_SERVERS=${KAFKA_LOGS_BOOTSTRAP_SERVERS}
      - KAFKA_LOGS_TOPIC=tpc-ingest-logs
      - POSTGRES_JDBC_URL=${POSTGRES_JDBC_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KIBANA=${KIBANA}
      - ELASTIC_SEARCH=${ELASTIC_SEARCH_URL}

    command: jobmanager
    networks:
      - flink-net

  taskmanager:
    image: flink:1.20.1
    container_name: flink-taskmanager
    depends_on:
      - jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - KAFKA_INGEST_BOOTSTRAP_SERVERS=kafka-ingest:29092
      - KAFKA_INGEST_TOPIC=tpc-ingest
      - KAFKA_DLQ_BOOTSTRAP_SERVERS=kafka-ingest-dlq:29093
      - KAFKA_DLQ_TOPIC=tpc-ingest-dlq
      - KAFKA_LOGS_BOOTSTRAP_SERVERS=kafka-logs:29094
      - KAFKA_LOGS_TOPIC=tpc-ingest-logs
      - POSTGRES_JDBC_URL=${POSTGRES_JDBC_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KIBANA=${KIBANA}
      - ELASTIC_SEARCH=${ELASTIC_SEARCH_URL}
      - KIBANA_HOST=${KIBANA_HOST}
      - ELASTIC_SEARCH_HOST=${ELASTIC_SEARCH_HOST}
      - KIBANA_HOST_PORT=${KIBANA_HOST_PORT}
      - ELASTIC_SEARCH_HOST_PORT=${ELASTIC_SEARCH_HOST_PORT}

    command: taskmanager
    networks:
      - flink-net

  # Kafka & Zookeeper Cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-net

  kafka-ingest:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-ingest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-ingest:9092,PLAINTEXT_HOST://${HOST_IP}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - kafka-net

  kafka-ingest-dlq:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-ingest-dlq
    depends_on:
      - zookeeper
      - kafka-ingest
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-ingest-dlq:9093,PLAINTEXT_HOST://${HOST_IP}:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - kafka-net

  kafka-logs:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-logs
    depends_on:
      - zookeeper
      - kafka-ingest
      - kafka-ingest-dlq
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-logs:9094,PLAINTEXT_HOST://${HOST_IP}:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - kafka-net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka-ingest
      - kafka-ingest-dlq
      - kafka-logs
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: wizard_test
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-ingest:9092,kafka-ingest-dlq:9093,kafka-logs:9094
    networks:
      - kafka-net

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      - kafka-ingest
      - kafka-ingest-dlq
      - kafka-logs
    restart: on-failure
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      while ! kafka-topics --bootstrap-server kafka-ingest:9092 --list; do
        echo 'Waiting for Kafka brokers to be ready...'
        sleep 5
      done

      kafka-topics --create --bootstrap-server kafka-ingest:9092 --replication-factor 1 --partitions 3 --topic tpc-ingest
      kafka-topics --create --bootstrap-server kafka-ingest-dlq:9093 --replication-factor 1 --partitions 3 --topic tpc-ingest-dlq
      kafka-topics --create --bootstrap-server kafka-logs:9094 --replication-factor 1 --partitions 3 --topic tpc-ingest-logs
      echo 'All topics created successfully!'
      "
    networks:
      - kafka-net

  # Elasticsearch & Kibana
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    networks:
      - elk-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.13
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - elk-network

# Define all networks used
networks:
  flink-net:
    driver: bridge
  kafka-net:
    driver: bridge
  elk-network:
    driver: bridge
  db-net:
    driver: bridge
  ingestion-agent-net:
    driver: bridge

volumes:
  pgadmin-data: